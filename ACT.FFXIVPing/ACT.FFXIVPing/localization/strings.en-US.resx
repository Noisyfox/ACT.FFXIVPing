<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="actPanelTitle" xml:space="preserve">
    <value>FF14 Ping Overlay</value>
  </data>
  <data name="buttonCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="buttonCheckUpdate" xml:space="preserve">
    <value>Check Update Now</value>
  </data>
  <data name="buttonDownloadUpdate" xml:space="preserve">
    <value>Open Download Website</value>
  </data>
  <data name="buttonFont" xml:space="preserve">
    <value>Change Font</value>
  </data>
  <data name="buttonHotkeyNone" xml:space="preserve">
    <value>Clear Hotkey</value>
  </data>
  <data name="buttonIgnore" xml:space="preserve">
    <value>忽略错误（插件将无法正常工作）</value>
  </data>
  <data name="buttonIgnoreVersion" xml:space="preserve">
    <value>Ignore</value>
  </data>
  <data name="buttonOk" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="buttonResetTexts" xml:space="preserve">
    <value>Reset Texts</value>
  </data>
  <data name="buttonResetToDefault" xml:space="preserve">
    <value>重置为默认设置</value>
  </data>
  <data name="buttonRestoreFromBackup" xml:space="preserve">
    <value>加载上一次的设置</value>
  </data>
  <data name="buttonUpdateLater" xml:space="preserve">
    <value>Later</value>
  </data>
  <data name="buttonUpdateNow" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="checkBoxAdvancedPing" xml:space="preserve">
    <value>Enable Advanced Ping</value>
  </data>
  <data name="checkBoxAutoHide" xml:space="preserve">
    <value>Automatically Hide Overlay</value>
  </data>
  <data name="checkBoxCheckUpdate" xml:space="preserve">
    <value>Check Update on Startup</value>
  </data>
  <data name="checkBoxClickthrough" xml:space="preserve">
    <value>Clickthrough</value>
  </data>
  <data name="checkBoxNotifyStableOnly" xml:space="preserve">
    <value>Check for Stable Version Only</value>
  </data>
  <data name="checkBoxShowOverlay" xml:space="preserve">
    <value>Show Overlay</value>
  </data>
  <data name="defaultOverlayContentNoData" xml:space="preserve">
    <value>No Ping Data...</value>
  </data>
  <data name="defaultOverlayContentNormal" xml:space="preserve">
    <value>Ping {ping_ms_na}, {lost}% Pkt Lost</value>
  </data>
  <data name="groupBoxOverlay" xml:space="preserve">
    <value>Overlay Settings</value>
  </data>
  <data name="groupBoxTextCustomization" xml:space="preserve">
    <value>Text Customization</value>
  </data>
  <data name="groupBoxUpdate" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="labelAdvancedPing" xml:space="preserve">
    <value>* By enabling advanced ping detection, the plugin will capture and read the contents of your game connection and calculate the latency using the heartbeat packets.

* This will give you the REAL latency between the game client sends a packet to server and receives the response packet.

* However, due to the existence of Server Tick Rate, this latency may be significantly larger than the normal ping value and will have greater volatility.

* This is particularly useful if you are using any sorts of VPN software.</value>
  </data>
  <data name="labelAvailableVariables" xml:space="preserve">
    <value>Available Variables: {ping} {ping_ms_na} {lost}</value>
  </data>
  <data name="labelCurrentVersion" xml:space="preserve">
    <value>Current Version:</value>
  </data>
  <data name="labelHeight" xml:space="preserve">
    <value>Height:</value>
  </data>
  <data name="labelLatestStableVersion" xml:space="preserve">
    <value>Lateset Stable Version:</value>
  </data>
  <data name="labelLatestVersion" xml:space="preserve">
    <value>Latest Version:</value>
  </data>
  <data name="labelMainLanguage" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="labelNeedToRestart" xml:space="preserve">
    <value>*Need to restart the ACT.</value>
  </data>
  <data name="labelOpacity" xml:space="preserve">
    <value>Opacity:</value>
  </data>
  <data name="labelOverlayContentNoData" xml:space="preserve">
    <value>No Data Text:</value>
  </data>
  <data name="labelOverlayContentNormal" xml:space="preserve">
    <value>Normal Text:</value>
  </data>
  <data name="labelPosition" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="labelRefreshInterval" xml:space="preserve">
    <value>Resampling Interval (s):</value>
  </data>
  <data name="labelShortcutHide" xml:space="preserve">
    <value>Shortcut:</value>
  </data>
  <data name="labelSize" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="labelWidth" xml:space="preserve">
    <value>Width:</value>
  </data>
  <data name="messageLatest" xml:space="preserve">
    <value>You are now using the latest version!</value>
  </data>
  <data name="messageNewPrerelease" xml:space="preserve">
    <value>New prerelease version available: {0}.</value>
  </data>
  <data name="messageNewStable" xml:space="preserve">
    <value>New stable version available: {0}.</value>
  </data>
  <data name="messageWaitKey" xml:space="preserve">
    <value>Wait for Keys...</value>
  </data>
  <data name="settingsError" xml:space="preserve">
    <value>无法加载当前的设置文件！</value>
  </data>
  <data name="settingsErrorBackup" xml:space="preserve">
    <value>上一次的设置文件备份也无法加载！</value>
  </data>
  <data name="settingsErrorHintNoBackup" xml:space="preserve">
    <value>你可以：
1. 重置为默认设置，注意这将导致当前设置丢失！
2. 直接忽略设置文件的错误并继续，这将不会更改任何现有设置，因此你可以手动检查你的设置文件并尝试恢复，但是本插件将无法正常工作！</value>
  </data>
  <data name="settingsErrorHintWithBackup" xml:space="preserve">
    <value>你可以：
1.从上一次的设置备份中恢复，注意这将导致当前设置丢失！
2.重置为默认设置，这也将导致当前设置丢失！
3.直接忽略设置文件的错误并继续，这将不会更改任何现有设置，因此你可以手动检查你的设置文件并尝试恢复，但是本插件将无法正常工作！</value>
  </data>
  <data name="tabPageAdvanced" xml:space="preserve">
    <value>Advanced Settings</value>
  </data>
  <data name="tabPageGeneralSettings" xml:space="preserve">
    <value>General Settings</value>
  </data>
  <data name="tabPageLog" xml:space="preserve">
    <value>Log</value>
  </data>
  <data name="updateChecking" xml:space="preserve">
    <value>Checking...</value>
  </data>
  <data name="versionUnknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
</root>